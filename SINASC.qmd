---
title: "Analysis of Genetic Anomalies found on SINASC database"
author: "BioHub Solutions"
date: 03/09/2024
date-format: DD/MM/YYYY
format: html
editor: visual
code-fold: true
---

## Loading libraries

The main libraries are [read.dbc](https://github.com/danicat/read.dbc), [microdatasus](https://github.com/rfsaldanha/microdatasus) and [cid10](https://github.com/msrodrigues/cid10). Both are hosted on GitHub. Check the links to see how to install them. The other packages are for data manipulation, analysis and visualization.

```{r, warning=FALSE, message=FALSE}

#ETL
library(read.dbc)
library(microdatasus)
library(DBI)
library(RPostgres)

#data manipulation
library(tidyverse)
library(janitor)
library(cid10)

#data viz
library(ggplot2)
library(patchwork)
library(DT)
library(htmltools)
```

## Downloading data from dataSUS

What is dataSUS?....

```{r, warning=FALSE, message=FALSE}
#| eval: false

#extract SINASC dataset
sinasc = fetch_datasus(year_start = 2010,
                       year_end = 2023,
                       month_start = 1,
                       month_end = 12,
                       uf = "all",
                       information_system = "SINASC")

#save into a RData
save(sinasc, file = "nao_upar/sinasc.RData")
```

```{r, warning=FALSE, message=FALSE}
#| echo: false


#load object already dowloaded
load("nao_upar/sinasc.RData")

```

> NOTE: A characteristic of SINASC is that the dataset is released yearly and, as now, the data from 2023 is preliminary.

## Data manipulation

A few data cleaning, and transformation will be necessary to make the dataset more organized and accurate.

```{r}

#use the function process_sinac and clean names with janitor
sinasc = process_sinasc(sinasc) |> 
  clean_names()

#remove deprecated collumns remaining from the function process_sinasc

sinasc1 = sinasc1 |> 
  rownames_to_column(var = "entry") |> 
  mutate(locnasc = locnasc_as_factor_data_locnasc,
         idademae = idademae_as_factor_data_idademae,
         estcivmae = estcivmae_as_factor_data_estcivmae,
         escmae = escmae_as_factor_data_escmae, 
         gestacao = gestacao_as_factor_data_gestacao,
         parto = parto_as_factor_data_parto) |> 
  select(-c(contains("_as_factor_"))) |>
  mutate(across(contador:codmunnasc, ~ as.numeric(.x))) |>
  mutate(locnasc = as.factor(locnasc)) |> 
  mutate(idademae = as.numeric(idademae)) |> 
  mutate(across(estcivmae:escmae, ~ as.factor(.x))) |>
  mutate(across(qtdfilvivo:codmunres, ~ as.numeric(.x))) |>
  mutate(across(gestacao:consultas, ~ as.factor(.x))) |>
  mutate(dtnasc = as.Date(dtnasc, tryFormats = "%Y-%m-%d")) |>
  mutate(sexo = as.factor(sexo)) |> 
  mutate(across(apgar1:apgar5, ~ as.numeric(.x))) |> 
  mutate(peso = as.numeric(peso)) |> 
  mutate(idanomal = as.factor(idanomal)) |> 
  mutate(dtcadastro = as.Date(dtcadastro, tryFormats = "%Y-%m-%d")) |>
  mutate(dtrecebim = as.Date(dtrecebim, tryFormats = "%Y-%m-%d")) |>
  mutate(across(naturalmae:codufnatu, ~ as.factor(.x))) |>
  mutate(across(escmae2010:seriescmae, ~ as.numeric(.x))) |> 
  mutate(dtnascmae = as.Date(dtnascmae, tryFormats = "%Y-%m-%d")) |>
  mutate(racacormae = as.factor(racacormae)) |>   
  mutate(across(qtdgestant:idadepai, ~ as.numeric(.x))) |>  
  mutate(dtultmenst = as.Date(dtultmenst, tryFormats = "%Y-%m-%d")) |>
  mutate(semagestac = as.numeric(semagestac)) |> 
  mutate(tpmetestim = case_when(tpmetestim == 1 ~ "exame físico",
                                tpmetestim == 2 ~ "outro método",
                                tpmetestim == 9 ~ "ignorado")) |> 
  mutate(tpmetestim = as.factor(tpmetestim)) |> 
  mutate(across(consprenat:mesprenat, ~ as.numeric(.x))) |> 
  mutate(tpapresent = case_when(tpapresent == 1 ~ "cefálico",
                                tpapresent == 2 ~ "pélvica ou podálica",
                                tpapresent == 3 ~ "transversa",
                                tpapresent == 9 ~ "ignorado")) |> 
  mutate(sttrabpart = case_when(sttrabpart == 1 ~ "sim",
                                sttrabpart == 2 ~ "não",
                                sttrabpart == 3 ~ "não se aplica",
                                sttrabpart == 9 ~ "ignorado")) |>
  mutate(stcesparto = case_when(stcesparto == 1 ~ "sim",
                                stcesparto == 2 ~ "não",
                                stcesparto == 3 ~ "não se aplica",
                                stcesparto == 9 ~ "ignorado")) |> 
  mutate(tpnascassi = case_when(tpnascassi == 1 ~ "médico",
                                tpnascassi == 2 ~ "enfermagem ou obstetriz",
                                tpnascassi == 3 ~ "parteira",
                                tpnascassi == 4 ~ "outros",
                                tpnascassi == 9 ~ "ignorado")) |> 
  mutate(tpdocresp = case_when(tpdocresp == 1 ~ "médico",
                               tpdocresp == 2 ~ "enfermagem",
                               tpdocresp == 3 ~ "parteira",
                               tpdocresp == 4 ~ "funcionário do cartório",
                               tpdocresp == 5 ~ "outros")) |> 
  mutate(tpfuncresp = case_when(tpfuncresp == 1 ~ "CNES",
                                tpfuncresp == 2 ~ "CRM",
                                tpfuncresp == 3 ~ "COREM",
                                tpfuncresp == 4 ~ "RG",
                                tpfuncresp == 5 ~ "CPF")) |>
  mutate(dtdeclarac = as.Date(dtdeclarac, tryFormats = "%Y-%m-%d")) |>
  mutate(escmaeagr1 = case_when(escmaeagr1 == 0  ~ "sem escolaridade",
                                escmaeagr1 == 2  ~ "fundamental incompleto",
                                escmaeagr1 == 3  ~ "fundamental I completo",
                                escmaeagr1 == 4  ~ "fundamental II incompleto",
                                escmaeagr1 == 5  ~ "fundamental II completo",
                                escmaeagr1 == 6  ~ "ensino médio incompleto",
                                escmaeagr1 == 7  ~ "ensino médio completo",
                                escmaeagr1 == 8  ~ "superior incompleto",
                                escmaeagr1 == 9  ~ "superior completo",
                                escmaeagr1 == 10 ~ "ignorado",
                                escmaeagr1 == 11 ~ "fundamental II incompleto ou inespecífico",
                                escmaeagr1 == 12 ~ "ensino médio incompleto ou inespecífico")) |>
  mutate(stdnepidem = case_when(stdnepidem == 1 ~ "sim",
                                stdnepidem == 2 ~ "não")) |> 
  mutate(stdnnova = case_when(stdnnova == 1 ~ "sim",
                              stdnnova == 2 ~ "não")) |>
  mutate(codpaisres = as.factor(codpaisres)) |> 
  mutate(tprobson = as.numeric(tprobson)) |> 
  mutate(paridade = case_when(paridade == 1 ~ "multípara",
                              paridade == 2 ~ "nulípara")) |>  
  mutate(across(kotelchuck:contador_2, ~ as.numeric(.x))) |>
  mutate(across(codocupmae:mun_res_uf, ~ as.factor(.x))) |>
  mutate(across(mun_res_lat:mun_res_area, ~ as.numeric(.x)))

```

When making an internal data validation, we have detected that some values in the 'dtultmenst' variable are not in the format YYYY-MM-DD. Instead it is in the format YY-MM-DD. Therefore, we needed to fix this formating error prior to send the dataset to a postgreSQL database.

```{r, warning=FALSE, message=FALSE}

sinasc = sinasc |> 
  mutate(dtultmenst = if_else(nchar(as.character(dtultmenst)) == 8, 
                              paste0("20",as.character(dtultmenst)),
                              as.character(dtultmenst))) |> 
  mutate(dtultmenst = as.Date(dtultmenst, tryFormats = "%Y-%m-%d"))
```

The same happened for the 'dtnascmae' variable, however with three different types of formatting error.

```{r, warning=FALSE, message=FALSE}

sinasc = sinasc |>
  mutate(dtnascmae = if_else(nchar(as.character(dtnascmae)) == 7, 
                             paste0("200",as.character(dtnascmae)), 
                             as.character(dtnascmae))) |> 
  mutate(dtnascmae = if_else(nchar(as.character(dtnascmae)) == 8, 
                             paste0("19",as.character(dtnascmae)),  
                             as.character(dtnascmae))) |> 
  mutate(dtnascmae = if_else(nchar(as.character(dtnascmae)) == 9, 
                             paste0("1",as.character(dtnascmae)),   
                             as.character(dtnascmae))) |> 
  mutate(dtnascmae = as.Date(dtnascmae, tryFormats = "%Y-%m-%d")) 
```

> Furthermore, we detected an entry with the mother birth date as '1-03-23', which would be 2001-03-23, but the registered mother age was 29 years.

Next, we will create a category for when the child has only one anomaly or multiple anomalies and another category with prirority anomalies based on the CID-10 nomenclature.

```{r, warning=FALSE, message=FALSE}


anomalias_prioritarias = list(defeitos_tubo_neural = c("Q000", "Q001", "Q002", "Q010", "Q050"),
                             microcefalia = c("Q020"),
                             cardiopatias_congenitas = c("Q200", "Q210", "Q220","Q230", "Q240", "Q250", "Q260", "Q270", "Q280"),
                             fendas_orais = c("Q350", "Q360", "Q370"),
                             defeitos_orgaos_genitais = c("Q540","Q560"),
                             defeitos_membros = c("Q660", "Q690", "Q710", "Q720", "Q730", "Q743"),
                             defeitos_parede_abdominal = c("Q792", "Q793"),
                             sindorme_down = c("Q900")
)

sinasc = sinasc |>
  mutate(codanomal = gsub("X", "0", codanomal)) %>% 
  mutate(codanomal = gsub(" ", "", codanomal)) %>% 
  mutate(codanomal = gsub("(.{4})(?=.{1,})", "\\1;", codanomal, perl = TRUE)) %>% 
  mutate(anomal_categ = case_when(nchar(codanomal) == 4 ~ "isolada",
                                  nchar(codanomal) >= 5 ~ "múltipla",
                                  is.na(codanomal) == TRUE ~ "sem_anomalia"
         )) %>% 
  mutate(anomal_prioritarias = case_when(grepl(paste(anomalias_prioritarias[[1]], collapse = "|"), codanomal) == TRUE ~ "defeitos_tubo_neural",
                                         grepl(paste(anomalias_prioritarias[[2]], collapse = "|"), codanomal) == TRUE ~ "microcefalia",
                                         grepl(paste(anomalias_prioritarias[[3]], collapse = "|"), codanomal) == TRUE ~ "cardiopatias_congenitas",
                                         grepl(paste(anomalias_prioritarias[[4]], collapse = "|"), codanomal) == TRUE ~ "fendas_orais",
                                         grepl(paste(anomalias_prioritarias[[5]], collapse = "|"), codanomal) == TRUE ~ "defeitos_orgaos_genitais",
                                         grepl(paste(anomalias_prioritarias[[6]], collapse = "|"), codanomal) == TRUE ~ "defeitos_membros",
                                         grepl(paste(anomalias_prioritarias[[7]], collapse = "|"), codanomal) == TRUE ~ "defeitos_parede_abdominal",
                                         grepl(paste(anomalias_prioritarias[[8]], collapse = "|"), codanomal) == TRUE ~ "sindorme_down",
                                         (idanomal == "Sim" &
                                           grepl(paste(as.character(unlist(anomalias_prioritarias)), collapse = "|"), codanomal) == FALSE) ~ "outras_anomalias"
))

```

## Load the dataframe into a PostgreSQL database

In order to make the dataset more accessible, we will finish the ETL process by loading the transformed object into a postgresql database, so anyone with access to it can make direct queries or use it with other pipelines downstream.

> NOTE: create a file .env, in the project directory, to store your credentials. each row should contain one variable and its value (without quotes), such as:\
> \
> USER=postgres
>
> PASSWORD=r\>python

```{r}

#read the environment variables with the credentials
readRenviron(".env")

con = dbConnect(drv = RPostgres::Postgres(),
                dbname="data_sus",
                host = Sys.getenv("HOST_ADRESS"),
                port = 5432,
                user = Sys.getenv("USER"),
                password = Sys.getenv("PASSWORD"))

#write the datafame as a SQL table
dbWriteTable(conn = con,
             name = "sinasc",   
             value = sinasc,
             field.types = c(entry = "SERIAL PRIMARY KEY"),
             overwrite = TRUE)

```

To confirm that the load was successful, we can make a query to the database and see if the results are consistent:

```{r, warning=FALSE, message=FALSE}

#query for the 100 first rows of the table
query = paste0("SELECT * FROM sinasc LIMIT 100;")
result = dbGetQuery(con, query)

#close the connection
dbDisconnect(con)
rm(con)

#get an overview of the dataset
glimpse(result, width = 75)
```

> NOTE: As it is possible to see with glimpse(), the original factor variables in the dataframe where automatically converted into character when the data is pulled from the postgreSQL database.

## Descriptive Analysis
